{"ast":null,"code":"import _asyncToGenerator from \"D:/Porjects Git Repo/clg-pro-web-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { NewMeetDetail } from 'src/app/shared/modals/newMeetDetail';\nlet MeetingsComponent = class MeetingsComponent {\n  constructor(_meetingServices, _activeRoute, _router) {\n    this._meetingServices = _meetingServices;\n    this._activeRoute = _activeRoute;\n    this._router = _router;\n    this.meetingDetails = new NewMeetDetail();\n    this.userList = [];\n    this.mediaStream = null;\n    this.isMicOn = false;\n    this.isVideoOn = false;\n    this.isScreenShredOn = false;\n  }\n  ngOnInit() {\n    this._activeRoute.queryParams.subscribe(res => {\n      if (res['meetId']) {\n        this.loadMeetDetailsByMeetingCode(res['meetId']);\n      }\n    });\n  }\n  loadMeetDetailsByMeetingCode(_meetId) {\n    this.meetingDetails = this._meetingServices.getMeetDetailsByMeetCode(_meetId);\n    if (this.meetingDetails.MeetCode) {\n      this.loadUserList();\n    }\n  }\n  loadUserList() {\n    let _localStoArray = localStorage;\n    if (_localStoArray.length) {\n      debugger;\n      for (let i = 0; i < localStorage.length; i++) {\n        let _key = localStorage.key(i);\n        if (_key?.toLowerCase().includes('user')) {\n          let _userDetails = localStorage.getItem(_key);\n          if (_userDetails) {\n            _userDetails = JSON.parse(_userDetails);\n            this.userList.push(_userDetails);\n          }\n        }\n      }\n    }\n  }\n  leaveMeeting() {\n    // localStorage.removeItem('user');\n    this._router.navigate(['dashboard']);\n  }\n  startCamera() {\n    navigator.mediaDevices.getUserMedia({\n      video: true\n    }).then(stream => {\n      this.stream = stream;\n      this.videoElement.nativeElement.srcObject = stream;\n    }).catch(error => {\n      console.error('Error accessing camera:', error);\n    });\n  }\n  stopCamera() {\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => track.stop());\n    }\n  }\n  startScreenSharing() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this.mediaStream = yield navigator.mediaDevices.getDisplayMedia({\n          video: {\n            displaySurface: 'browser'\n          },\n          audio: false\n        });\n        const videoElement = document.getElementById('screenVideo');\n        if (videoElement) {\n          videoElement.srcObject = _this.mediaStream;\n        }\n        _this.mediaStream.getVideoTracks()[0].onended = () => {\n          _this.stopScreenSharing();\n        };\n      } catch (error) {\n        console.error('Error capturing screen:', error);\n      }\n    })();\n  }\n  stopScreenSharing() {\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n  }\n};\n__decorate([ViewChild('videoElement', {\n  static: false\n})], MeetingsComponent.prototype, \"videoElement\", void 0);\nMeetingsComponent = __decorate([Component({\n  selector: 'app-meetings',\n  templateUrl: './meetings.component.html',\n  styleUrls: ['./meetings.component.scss']\n})], MeetingsComponent);\nexport { MeetingsComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","NewMeetDetail","MeetingsComponent","constructor","_meetingServices","_activeRoute","_router","ngOnInit","queryParams","subscribe","res","loadMeetDetailsByMeetingCode","_meetId","meetingDetails","getMeetDetailsByMeetCode","MeetCode","loadUserList","_localStoArray","localStorage","length","i","_key","key","toLowerCase","includes","_userDetails","getItem","JSON","parse","userList","push","leaveMeeting","navigate","startCamera","navigator","mediaDevices","getUserMedia","video","then","stream","videoElement","nativeElement","srcObject","catch","error","console","stopCamera","getTracks","forEach","track","stop","startScreenSharing","mediaStream","getDisplayMedia","displaySurface","audio","document","getElementById","getVideoTracks","onended","stopScreenSharing","__decorate","static","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Porjects Git Repo\\clg-pro-web-app\\src\\app\\@core\\components\\meetings\\meetings.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { MeetingsService } from '../../services/meetings.service';\r\nimport { NewMeetDetail } from 'src/app/shared/modals/newMeetDetail';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { UserDetail } from 'src/app/shared/modals/userDetail';\r\n\r\n@Component({\r\n  selector: 'app-meetings',\r\n  templateUrl: './meetings.component.html',\r\n  styleUrls: ['./meetings.component.scss']\r\n})\r\nexport class MeetingsComponent implements OnInit {\r\n  @ViewChild('videoElement', { static: false }) videoElement!: ElementRef;\r\n  stream!: MediaStream;\r\n\r\n  constructor(\r\n    private _meetingServices: MeetingsService,\r\n    private _activeRoute: ActivatedRoute,\r\n    private _router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this._activeRoute.queryParams.subscribe(\r\n      (res: any) => {\r\n        if (res['meetId']) {\r\n          this.loadMeetDetailsByMeetingCode(res['meetId']);\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  meetingDetails: NewMeetDetail = new NewMeetDetail();\r\n\r\n  loadMeetDetailsByMeetingCode(_meetId: string) {\r\n    this.meetingDetails = this._meetingServices.getMeetDetailsByMeetCode(_meetId);\r\n    if (this.meetingDetails.MeetCode) {\r\n      this.loadUserList();\r\n    }\r\n  }\r\n\r\n  userList: UserDetail[] = [];\r\n  loadUserList() {\r\n    let _localStoArray = localStorage;\r\n    if (_localStoArray.length) {\r\n      debugger\r\n      for (let i = 0; i < localStorage.length; i++) {\r\n        let _key = localStorage.key(i);\r\n        if (_key?.toLowerCase().includes('user')) {\r\n          let _userDetails: any = localStorage.getItem(_key);\r\n          if (_userDetails) {\r\n            _userDetails = JSON.parse(_userDetails);\r\n            this.userList.push(_userDetails);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  leaveMeeting() {\r\n    // localStorage.removeItem('user');\r\n    this._router.navigate(['dashboard']);\r\n  }\r\n\r\n  startCamera() {\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true })\r\n      .then((stream) => {\r\n        this.stream = stream;\r\n        this.videoElement.nativeElement.srcObject = stream;\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error accessing camera:', error);\r\n      });\r\n  }\r\n\r\n  stopCamera() {\r\n    if (this.stream) {\r\n      this.stream.getTracks().forEach(track => track.stop());\r\n    }\r\n  }\r\n\r\n  private mediaStream: MediaStream | null = null;\r\n\r\n  async startScreenSharing() {\r\n    try {\r\n      this.mediaStream = await navigator.mediaDevices.getDisplayMedia({\r\n        video: {\r\n          displaySurface: 'browser',\r\n        } as MediaTrackConstraints,\r\n        audio: false\r\n      });\r\n\r\n      const videoElement = document.getElementById('screenVideo') as HTMLVideoElement;\r\n      if (videoElement) {\r\n        videoElement.srcObject = this.mediaStream;\r\n      }\r\n\r\n      this.mediaStream.getVideoTracks()[0].onended = () => {\r\n        this.stopScreenSharing();\r\n      };\r\n    } catch (error) {\r\n      console.error('Error capturing screen:', error);\r\n    }\r\n  }\r\n\r\n  stopScreenSharing() {\r\n    if (this.mediaStream) {\r\n      this.mediaStream.getTracks().forEach(track => track.stop());\r\n      this.mediaStream = null;\r\n    }\r\n  }\r\n\r\n  isMicOn:boolean = false;\r\n  isVideoOn:boolean = false;\r\n  isScreenShredOn:boolean = false;\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}